#Default values are set internally, if the corresponding parameter is not found in the configuration file.

#[Optional but highly suggested] The name will be used for saving the models,logs and results.
#Default: "trainSession"
sessionName = "trainSessionDeepMedic"

#[Required] The main folder that the output will be placed.
folderForOutput = "../../../output/"

#[Optional] The path to the saved CNN-model to use for training. Optional in the case the the model is specified from command line with the -model option. In this case, this entry file of the config file will be disregarded, and the one from the command line will be used.
cnnModelFilePath = "../../../output/models/placeholder"


#=======================Training=====================================

#+++++++++++Input+++++++++++

#[Required] A list that should contain as many entries as the channels of the input image (eg multi-modal MRI). The entries should be paths to files. Those files should be listing the paths to the corresponding channels for each training-case. (see example files).
channelsTraining = ["./trainChannels_flair.cfg", "./trainChannels_t1c.cfg"]

#[Required] The path to a file which should list paths to the Ground Truth labels of each training case.
gtLabelsTraining = "./trainGtLabels.cfg"

#+++++++++++Sampling+++++++++++

#[Optional] The path to a file, which should list paths to the Region-Of-Interest masks for each training case.
#If ROI masks are provided, under default-sampling settings, the training samples will be extracted only within it. Otherwise from whole volume.
#This mask is also used for calculating mu and std intensities for intensity-augmentation, if performed.
roiMasksTraining = "./trainRoiMasks.cfg"

#[Optional] The percentage of training samples to extract from foreground (GT-labels).
#Default: 0.5
percentOfSamplesToExtractPositiveTrain = 0.5

#+++++++++++Advanced Sampling+++++++++++

#[Optional] True in order to use default sampling for training. In this case, positive samples are extracted from within the GT mask.
#Negative samples are then extracted from the ROI (or full volume), excluding the GT.
#NOTE: Advanced options are disabled if default settings are used.
#Default: True
useDefaultTrainingSamplingFromGtAndRoi = True

"""
#++Adv.Sampl. Options. These are disabled if Using-Default-Training-Sampling.++
#Weight-maps, that will define areas of the image to sample more. Separate for training and negative samples.
#Note: Weight-maps dont have to be normalized.
#Implementation Note: Internally, these are what is actually used for sampling. Under default settings, the pos-weight-map is passed GT-labels, neg-weight-map passed the ROI.
weightedMapsForPosSamplingTrain = "./trainGtLabels.cfg" 
weightedMapsForNegSamplingTrain = "./trainRoiMasks.cfg"
#Specify if the weight-maps are actually weights (True). If False, we assume they are GT/ROI. And subtract GT from ROI to do the negative-sampling.
samplingMasksAreProbMapsTrain = False
"""

#+++++++++++Training Cycle (see documentation)+++++++++++

#[Optionals but highly suggested as they are model dependent.]
#How many epochs to train for. Default: 35
numberOfEpochs=35
#How many subepochs comprise an epoch. Every subepoch I get Accuracy reported. Default: 20
numberOfSubepochs = 20
#Every subepoch, load the images from that many cases and extract new training samples. Default: 50
numOfCasesLoadedPerSubepoch = 50
#Every subepoch, extract in total this many segments and load them on the GPU. Memory Limitated. Default: 1000
#Note: This number in combination with the batchSizeTraining, define the number of optimization steps per subepoch (=NumOfSegmentsOnGpu / BatchSize).
numberTrainingSegmentsLoadedOnGpuPerSubep = 1000

#+++++++++++Learning Rate Schedule+++++++++++

#[Optional] The type of schedule to use for Learning Rate annealing.
#0=Stable Decrease. 1=Auto (Lower LR when validation accuracy plateaus. Requires validation-on-samples). 2=Lower at predefined epochs. 3=Exponentially decrease LR, linearly increase Mom.
#NOTE: Training Schedule is very important. We suggest running stable and observing training error, then lower LR when it plateaus. Otherwise, use exponential but make sure to train for enough epochs.
stable0orAuto1orPredefined2orExponential3LrSchedule = 2

#[For Stable + Auto + Predefined] By how much to divide LR when lowering. Default: 2
whenDecreasingDivideLrBy = 2.0

#[For Stable + Auto] How many epochs to wait before decreasing again. Set Zero to never lower LR. Default: 3
#numEpochsToWaitBeforeLoweringLr = 3
#[For Auto] If validation accuracy increases more than this much, reset the waiting counter. Default: 0.0005
#minIncreaseInValidationAccuracyThatResetsWaiting = 0.0005

#[Required for Predefined] At which epochs to lower LR.
predefinedSchedule = [12, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46]

#[Required for Exponential] [First epoch to start lowering from, value for LR to reach at last epoch, value for Mom to reach at last epoch]
exponentialSchedForLrAndMom = [12, 1.0/(2**(7)), 0.9]

#+++++++++++Data Augmentation+++++++++++

#[Optional] Specify whether to reflect the images by 50% probability in respect to the X/Y/Z axis. Default: [False, False, False]
reflectImagesPerAxis = [True,False,False]

#[Optional] Augmentation by changing the mean and std of training samples. Default: False
performIntAugm = False
#I' = (I + shift) * multi
#[Optionals] We sample the "shift" and "multi" variable for each sample from a Gaussian distribution. Specify the mu and std.
#Defaults : [0, 0.1] and [1.,0.]
sampleIntAugmShiftWithMuAndStd = [0, 0.1]
sampleIntAugmMultiWithMuAndStd = [1., 0.0]


#==================Validation=====================

#[Optionals] Specify whether to perform validation on samples and full-inference every few epochs. Default: False for both.
performValidationOnSamplesThroughoutTraining = True
performFullInferenceOnValidationImagesEveryFewEpochs = True

#[Required] Similar to corresponding parameter for training, but points to cases for validation.
channelsValidation = ["./validation/validationChannels_flair.cfg", "./validation/validationChannels_t1c.cfg"]

#[Required for validation on samples, optional for full-inference] Similar to corresponding parameter for training, but points to cases for validation.
gtLabelsValidation = "./validation/validationGtLabels.cfg"

#[Required] Similar to corresponding parameter for training. Only influences how accurately the validation samples will represent whole data. Memory bounded.
#Default: 3000
numberValidationSegmentsLoadedOnGpuPerSubep = 5000 

#[Optional] Similar to corresponding parameter for training
roiMasksValidation = "./validation/validationRoiMasks.cfg"

#+++++Advanced Validation Sampling+++++:

#[Optional] True in order to use default sampling for validation. Default is uniform sampling from ROI.
#NOTE: Advanced options are disabled if default settings are used.
#Default: True
useDefaultUniformValidationSampling = True

"""
#++Adv.Sampl. Options. These are disabled if Using-Default-Validation-Sampling.++
#Similar parameters to the training case.
percentOfSamplesToExtractPositiveVal = 0.0
weightedMapsForPosSamplingVal = None
weightedMapsForNegSamplingVal = "./validation/validationRoiMasks.cfg"
samplingMasksAreProbMapsVal = False
"""

#+++++Full-Inference on validation cases+++++
#[Optional] How often (epochs) to perform full inference. It is time consuming... Default: 1
numberOfEpochsBetweenFullInferenceOnValImages = 5

#[Optionals] Specify whether to save the segmentation and probability maps for each class. Default: True to all
saveSegmentationVal = True
saveProbMapsForEachClassVal = [True, True, True, True, True]

#[Required if requested to save results] The path to a file, which should list names for each validation case, to name the results after.
namesForPredictionsPerCaseVal = "./validation/validationNamesOfPredictions.cfg"

#--Feature Maps--
#Feature maps can also be saved, but section is omitted here. See testing configuration.

#==========Generic=============
[Optional] Pad images to fully convolve. Default: True
padInputImagesBool = True



